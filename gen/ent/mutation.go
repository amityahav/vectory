// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Vectory/gen/ent/collection"
	"Vectory/gen/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollection = "Collection"
)

// CollectionMutation represents an operation that mutates the Collection nodes in the graph.
type CollectionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	index_type      *string
	data_type       *string
	embedder_type   *string
	index_params    *map[string]interface{}
	embedder_config *map[string]interface{}
	mappings        *[]string
	appendmappings  []string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Collection, error)
	predicates      []predicate.Collection
}

var _ ent.Mutation = (*CollectionMutation)(nil)

// collectionOption allows management of the mutation configuration using functional options.
type collectionOption func(*CollectionMutation)

// newCollectionMutation creates new mutation for the Collection entity.
func newCollectionMutation(c config, op Op, opts ...collectionOption) *CollectionMutation {
	m := &CollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectionID sets the ID field of the mutation.
func withCollectionID(id int) collectionOption {
	return func(m *CollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Collection
		)
		m.oldValue = func(ctx context.Context) (*Collection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollection sets the old Collection of the mutation.
func withCollection(node *Collection) collectionOption {
	return func(m *CollectionMutation) {
		m.oldValue = func(context.Context) (*Collection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CollectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CollectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CollectionMutation) ResetName() {
	m.name = nil
}

// SetIndexType sets the "index_type" field.
func (m *CollectionMutation) SetIndexType(s string) {
	m.index_type = &s
}

// IndexType returns the value of the "index_type" field in the mutation.
func (m *CollectionMutation) IndexType() (r string, exists bool) {
	v := m.index_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIndexType returns the old "index_type" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldIndexType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndexType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndexType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndexType: %w", err)
	}
	return oldValue.IndexType, nil
}

// ResetIndexType resets all changes to the "index_type" field.
func (m *CollectionMutation) ResetIndexType() {
	m.index_type = nil
}

// SetDataType sets the "data_type" field.
func (m *CollectionMutation) SetDataType(s string) {
	m.data_type = &s
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *CollectionMutation) DataType() (r string, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *CollectionMutation) ResetDataType() {
	m.data_type = nil
}

// SetEmbedderType sets the "embedder_type" field.
func (m *CollectionMutation) SetEmbedderType(s string) {
	m.embedder_type = &s
}

// EmbedderType returns the value of the "embedder_type" field in the mutation.
func (m *CollectionMutation) EmbedderType() (r string, exists bool) {
	v := m.embedder_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedderType returns the old "embedder_type" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldEmbedderType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedderType: %w", err)
	}
	return oldValue.EmbedderType, nil
}

// ResetEmbedderType resets all changes to the "embedder_type" field.
func (m *CollectionMutation) ResetEmbedderType() {
	m.embedder_type = nil
}

// SetIndexParams sets the "index_params" field.
func (m *CollectionMutation) SetIndexParams(value map[string]interface{}) {
	m.index_params = &value
}

// IndexParams returns the value of the "index_params" field in the mutation.
func (m *CollectionMutation) IndexParams() (r map[string]interface{}, exists bool) {
	v := m.index_params
	if v == nil {
		return
	}
	return *v, true
}

// OldIndexParams returns the old "index_params" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldIndexParams(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndexParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndexParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndexParams: %w", err)
	}
	return oldValue.IndexParams, nil
}

// ResetIndexParams resets all changes to the "index_params" field.
func (m *CollectionMutation) ResetIndexParams() {
	m.index_params = nil
}

// SetEmbedderConfig sets the "embedder_config" field.
func (m *CollectionMutation) SetEmbedderConfig(value map[string]interface{}) {
	m.embedder_config = &value
}

// EmbedderConfig returns the value of the "embedder_config" field in the mutation.
func (m *CollectionMutation) EmbedderConfig() (r map[string]interface{}, exists bool) {
	v := m.embedder_config
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedderConfig returns the old "embedder_config" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldEmbedderConfig(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedderConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedderConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedderConfig: %w", err)
	}
	return oldValue.EmbedderConfig, nil
}

// ResetEmbedderConfig resets all changes to the "embedder_config" field.
func (m *CollectionMutation) ResetEmbedderConfig() {
	m.embedder_config = nil
}

// SetMappings sets the "mappings" field.
func (m *CollectionMutation) SetMappings(s []string) {
	m.mappings = &s
	m.appendmappings = nil
}

// Mappings returns the value of the "mappings" field in the mutation.
func (m *CollectionMutation) Mappings() (r []string, exists bool) {
	v := m.mappings
	if v == nil {
		return
	}
	return *v, true
}

// OldMappings returns the old "mappings" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldMappings(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMappings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMappings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMappings: %w", err)
	}
	return oldValue.Mappings, nil
}

// AppendMappings adds s to the "mappings" field.
func (m *CollectionMutation) AppendMappings(s []string) {
	m.appendmappings = append(m.appendmappings, s...)
}

// AppendedMappings returns the list of values that were appended to the "mappings" field in this mutation.
func (m *CollectionMutation) AppendedMappings() ([]string, bool) {
	if len(m.appendmappings) == 0 {
		return nil, false
	}
	return m.appendmappings, true
}

// ResetMappings resets all changes to the "mappings" field.
func (m *CollectionMutation) ResetMappings() {
	m.mappings = nil
	m.appendmappings = nil
}

// Where appends a list predicates to the CollectionMutation builder.
func (m *CollectionMutation) Where(ps ...predicate.Collection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Collection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Collection).
func (m *CollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, collection.FieldName)
	}
	if m.index_type != nil {
		fields = append(fields, collection.FieldIndexType)
	}
	if m.data_type != nil {
		fields = append(fields, collection.FieldDataType)
	}
	if m.embedder_type != nil {
		fields = append(fields, collection.FieldEmbedderType)
	}
	if m.index_params != nil {
		fields = append(fields, collection.FieldIndexParams)
	}
	if m.embedder_config != nil {
		fields = append(fields, collection.FieldEmbedderConfig)
	}
	if m.mappings != nil {
		fields = append(fields, collection.FieldMappings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldName:
		return m.Name()
	case collection.FieldIndexType:
		return m.IndexType()
	case collection.FieldDataType:
		return m.DataType()
	case collection.FieldEmbedderType:
		return m.EmbedderType()
	case collection.FieldIndexParams:
		return m.IndexParams()
	case collection.FieldEmbedderConfig:
		return m.EmbedderConfig()
	case collection.FieldMappings:
		return m.Mappings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collection.FieldName:
		return m.OldName(ctx)
	case collection.FieldIndexType:
		return m.OldIndexType(ctx)
	case collection.FieldDataType:
		return m.OldDataType(ctx)
	case collection.FieldEmbedderType:
		return m.OldEmbedderType(ctx)
	case collection.FieldIndexParams:
		return m.OldIndexParams(ctx)
	case collection.FieldEmbedderConfig:
		return m.OldEmbedderConfig(ctx)
	case collection.FieldMappings:
		return m.OldMappings(ctx)
	}
	return nil, fmt.Errorf("unknown Collection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case collection.FieldIndexType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndexType(v)
		return nil
	case collection.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case collection.FieldEmbedderType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedderType(v)
		return nil
	case collection.FieldIndexParams:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndexParams(v)
		return nil
	case collection.FieldEmbedderConfig:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedderConfig(v)
		return nil
	case collection.FieldMappings:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMappings(v)
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Collection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Collection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectionMutation) ResetField(name string) error {
	switch name {
	case collection.FieldName:
		m.ResetName()
		return nil
	case collection.FieldIndexType:
		m.ResetIndexType()
		return nil
	case collection.FieldDataType:
		m.ResetDataType()
		return nil
	case collection.FieldEmbedderType:
		m.ResetEmbedderType()
		return nil
	case collection.FieldIndexParams:
		m.ResetIndexParams()
		return nil
	case collection.FieldEmbedderConfig:
		m.ResetEmbedderConfig()
		return nil
	case collection.FieldMappings:
		m.ResetMappings()
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Collection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Collection edge %s", name)
}
